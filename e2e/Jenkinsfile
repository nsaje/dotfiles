#!groovy
import hudson.model.Run
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

def getPreviousBuildResult() {
    Run previousBuild = currentBuild.rawBuild.getPreviousBuild()
    while (previousBuild != null) {
        String result = previousBuild.result.toString()
        if (result == 'SUCCESS' || result == 'FAILURE') {
            return result
        }
        previousBuild = previousBuild.getPreviousBuild()
    }
    return ""
}

node {
    try {
        stage('Kill previous builds') {
            Run previousBuild = currentBuild.rawBuild.getPreviousBuildInProgress()

            while (previousBuild != null) {
                if (previousBuild.isInProgress()) {
                    echo ">> Aborting older build #${previousBuild.number}"
                    previousBuild.doTerm()
                }

                previousBuild = previousBuild.getPreviousBuildInProgress()
            }
        }

        stage('Setup') {
            sh 'export'
            env.CACHE_DIR = "${WORKSPACE}/../_CACHE/${JOB_NAME}"
            sh 'mkdir -p ${CACHE_DIR}'
            env.PATH = "${JENKINS_HOME}/bin/:${env.PATH}"
            env.AWS_DEFAULT_REGION = "us-east-1"

            def upstream = currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause)
            if (upstream != null) {
                env.BUILD_NUMBER = upstream.getUpstreamBuild()
            }
        }

        stage('Code checkout') {
            checkout scm
            env.BRANCH_NAME = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
            env.GIT_AUTHOR = sh(script: 'git show -s --pretty=%an | head -1', returnStdout: true).trim()
            env.GIT_COMMIT_MESSAGE = sh(script: 'git show -s --pretty=%B | head -1', returnStdout: true).trim()
            // make sure we don't have leftovers from previous builds
            sh 'sudo git clean --force -d -x'
            // remove old lingering containsers and volumes
            sh 'docker-compose kill; docker-compose rm -v -f'
        }

        stage('Prepare containers') {
            sh 'make rebuild_if_differ'
            sh 'make build_e2e_utils'
            sh 'make build'
        }

        withCredentials([string(credentialsId: 'testim_token', variable: 'TESTIM_TOKEN')]) {
            stage('Testim e2e tests') {
                sh 'make test_e2e'
            }
        }

        stage('Notify success') {
            prevResult = getPreviousBuildResult()
            if (prevResult == 'FAILURE') {
                slackSend channel: "#rnd-z1-alerts-aux", color: "#8CC04F", failOnError: true, message: "(Testim E2E) Build Fixed (<${env.BUILD_URL}|Open Classic> | <${env.BUILD_URL}display/redirect|Open Blue Ocean>)"
            }
        }
    } catch (e) {
        prevResult = getPreviousBuildResult()
        if (!(e instanceof FlowInterruptedException) && prevResult == 'SUCCESS') {
            slackSend channel: "#rnd-z1-alerts-aux", color: "#D54C53", failOnError: true, message: "(Testim E2E) Build Failed (<${env.BUILD_URL}|Open Classic> | <${env.BUILD_URL}display/redirect|Open Blue Ocean>)"
        }
        throw e
    } finally {
        stage('Cleanup workspace') {
            sh 'docker-compose kill; docker-compose rm -v -f'
        }
    }
}
