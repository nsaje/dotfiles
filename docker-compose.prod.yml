version: "2.2"

services:
    # base definition for eins containers, not run
    eins-base:
        image: z1-bundle:current
        restart: unless-stopped
        hostname: ${HOSTNAME}
        volumes:
          - "/mnt/logs/eins:/app/logs"
        command: /bin/sleep 100000000
        environment:
          CONF_ENV: "prod"
          NEW_RELIC_LICENSE_KEY: "1dfbd7b07a5cbf7bcc6eb18db5003808a058d16f"
          NEW_RELIC_PROCESS_HOST_DISPLAY_NAME: "${HOSTNAME}-docker"
        labels:
          SERVICE_NAME: z1-base
          SERVICE_IGNORE: "true"
          SERVICE_TAGS: "z1"
          SERVICE_CHECK_TCP: "true"
          SERVICE_CHECK_INTERVAL: 5s
          SERVICE_CHECK_DEREGISTER_AFTER: 10s
        logging:
          driver: json-file
          options:
            max-size: "50m"
            max-file: "3"
            labels: "eins"
        sysctls:
          net.core.somaxconn: 2048
        networks:
          - legacynet

    # Main dashboard instance
    eins:
        extends: eins-base
        command: /start-server.sh
        environment:
          VIRTUAL_HOST: "one.zemanta.com"
          NEW_RELIC_APP_NAME: "Zemanta One"
          GUNICORN_TIMEOUT: "180"
          GUNICORN_WORKERS: "1"
          GUNICORN_THREADS: "1"
          GUNICORN_WORKER_CLASS: "gevent"
        expose:
          - "8000"
        mem_limit: 2g
        labels:
          SERVICE_NAME: z1
          SERVICE_IGNORE: "false"
        scale: 8

    one_ambassador:
        image: verb/socat
        restart: always
        command: TCP-LISTEN:8000,fork TCP:eins:8000
        ports:
          - "8001:8000"
        mem_limit: 128m
        labels:
          SERVICE_IGNORE: "true"
        networks:
          - legacynet
        depends_on:
          - eins

    # for local callback from K1 and BusinessWire integration
    eins-api-callback:
        extends: eins-base
        command: /start-server.sh
        expose:
          - "8000"
        environment:
          VIRTUAL_HOST: "one-cb.zemanta.com"
          NEW_RELIC_APP_NAME: "Zemanta One (callback API)"
          GUNICORN_WORKERS: "1"
          GUNICORN_THREADS: "1"
          GUNICORN_WORKER_CLASS: "gevent"
        mem_limit: 1g
        labels:
          SERVICE_NAME: one-cb
          SERVICE_IGNORE: "false"
        scale: 6

    one-cb_ambassador:
        image: verb/socat
        restart: always
        command: TCP-LISTEN:8000,fork TCP:eins-api-callback:8000
        ports:
          - "8002:8000"
        mem_limit: 128m
        labels:
          SERVICE_IGNORE: "true"
        networks:
          - legacynet
        depends_on:
          - eins-api-callback

    # for REST API
    eins-rest-api:
        extends: eins-base
        command: /start-server.sh
        expose:
          - "8000"
        environment:
          VIRTUAL_HOST: "oneapi.zemanta.com"
          NEW_RELIC_APP_NAME: "Zemanta One (REST API)"
          GUNICORN_WORKERS: "1"
          GUNICORN_THREADS: "1"
          GUNICORN_WORKER_CLASS: "gevent"
        mem_limit: 1g
        labels:
          SERVICE_NAME: oneapi
          SERVICE_IGNORE: "false"
        scale: 15

    oneapi_ambassador:
        image: verb/socat
        restart: always
        command: TCP-LISTEN:8000,fork TCP:eins-rest-api:8000
        ports:
          - "8004:8000"
        mem_limit: 128m
        labels:
          SERVICE_IGNORE: "true"
        networks:
          - legacynet
        depends_on:
          - eins-rest-api

    einsworker_reports:
        extends: eins-base
        scale: 5
        environment:
          NEW_RELIC_APP_NAME: "Zemanta One (Reports)"
        mem_limit: 4g
        labels:
          SERVICE_IGNORE: "true"
        entrypoint: ""
        command: "/usr/local/bin/newrelic-admin run-program celery worker -A server -c 1 -Q z1-reports -l INFO -f /app/logs/eins_celery_reports.log --prefetch-multiplier 0 -P prefork"

    einsworker_redshift_background_cache:
        extends: eins-base
        environment:
          NEW_RELIC_APP_NAME: "Zemanta One (Redshift Background Cache)"
        mem_limit: 512m
        labels:
          SERVICE_IGNORE: "true"
        entrypoint: ""
        command: "/usr/local/bin/newrelic-admin run-program celery worker -A server -c 1 -Q redshift-background-cache -l INFO -f /app/logs/eins_celery_redshift_background_cache.log --prefetch-multiplier 0 -P solo"

    einsworker_upload_lambda:
        environment:
          NEW_RELIC_APP_NAME: "Zemanta One (Lambda)"
        extends: eins-base
        mem_limit: 256m
        labels:
          SERVICE_IGNORE: "true"
        entrypoint: ""
        command: "/usr/local/bin/newrelic-admin run-program celery worker -A server -c 1 -Q z1-upload-lambda -l INFO -f /app/logs/eins_celery_upload_lambda.log --prefetch-multiplier 0 -P gevent"
        scale: 15

    einsworker_convapi:
        extends: eins-base
        mem_limit: 512m
        labels:
          SERVICE_IGNORE: "true"
        environment:
          NEW_RELIC_APP_NAME: "Zemanta One (ConvAPI)"
        entrypoint: ""
        command: "/usr/local/bin/newrelic-admin run-program celery worker -A server -c 1 -Q prod-convapi -l INFO -f /app/logs/eins_celery_convapi.log"
        scale: 3

    eins-jobs-pushgateway:
      image: prom/pushgateway
      restart: always
      entrypoint: ["/bin/pushgateway", "--web.listen-address=:8000", "--web.telemetry-path=/internal/metrics"]
      expose:
        - "8000"
      networks:
        - legacynet
      mem_limit: 512m

    # einsworker_convapi_v2:
    #     extends: eins-base
    #     mem_limit: 256m
    #     labels:
    #       traefik.enable: "false"
    #     entrypoint: ""
    #     command: "celery worker -A server -c 3 -Q prod-convapi_v2 -l INFO -f /app/logs/eins_celery_convapi_v2.log"

    # ONE Whitelabel
    eins-newscorp:
        extends: eins-base
        command: /start-server.sh
        ports:
          - "8000"
        environment:
          VIRTUAL_HOST: "newscorp.zemanta.com"
          NEW_RELIC_APP_NAME: "Zemanta One Whitelabel (Newscorp)"
        labels:
          SERVICE_NAME: one-newscorp
          SERVICE_IGNORE: "false"

# created with CLI: docker network create -d bridge legacynet
networks:
    legacynet:
        external: true

