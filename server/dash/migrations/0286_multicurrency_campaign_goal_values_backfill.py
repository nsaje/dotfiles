# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-03-22 09:38
from __future__ import unicode_literals

from django.db import migrations
from django.db import connection

import dash.campaign_goals

BATCH_SIZE = 100000

CAMPAIGN_GOAL_LOCAL_VALUES_CALCULATE_SQL = """
UPDATE dash_campaigngoalvalue cgv
SET    local_value = value * cer.exchange_rate
FROM   dash_campaigngoal cg
       JOIN dash_campaign cmp
         ON cg.campaign_id = cmp.id
       JOIN dash_account acc
         ON cmp.account_id = acc.id
       JOIN (SELECT DISTINCT currency,
                             First_value(exchange_rate)
                               OVER (
                                 partition BY currency
                                 ORDER BY date DESC) AS exchange_rate
             FROM   dash_currencyexchangerate) cer
         ON acc.currency = cer.currency
WHERE  cgv.campaign_goal_id = cg.id AND cgv.id BETWEEN %s AND %s AND cg.type IN %s;
"""

CAMPAIGN_GOAL_LOCAL_VALUES_COPY_SQL = """
UPDATE dash_campaigngoalvalue cgv
SET    local_value = value
FROM   dash_campaigngoal cg
WHERE  cgv.campaign_goal_id = cg.id AND cgv.id BETWEEN %s AND %s AND cg.type NOT IN %s;
"""


def campaign_goal_local_values_backfill(apps, schema_editor):
    with connection.cursor() as c:
        c.execute("SELECT MAX(id) FROM dash_campaigngoalvalue")
        count = c.fetchone()[0] or 0
        for i in range(0, count, BATCH_SIZE):
            c.execute("BEGIN")
            print("Backfilling local goal values with IDs between %s and %s" % (i, i + BATCH_SIZE))
            c.execute(CAMPAIGN_GOAL_LOCAL_VALUES_CALCULATE_SQL, [i, i + BATCH_SIZE, dash.campaign_goals.COST_DEPENDANT_GOALS])
            c.execute(CAMPAIGN_GOAL_LOCAL_VALUES_COPY_SQL, [i, i + BATCH_SIZE, dash.campaign_goals.COST_DEPENDANT_GOALS])
            c.execute("COMMIT")


class Migration(migrations.Migration):

    dependencies = [
        ('dash', '0285_merge_20180320_1141'),
    ]

    operations = [
        migrations.RunPython(campaign_goal_local_values_backfill),
    ]
