# Generated by Django 2.1.2 on 2019-01-30 14:34

from django.db import migrations, connection


DOCUMENT_ID_BIGINT_CREATE_SQL = """
ALTER TABLE dash_contentad
ADD COLUMN document_id_big bigint;
"""

DOCUMENT_ID_BIGINT_UPDATE_SQL = """
UPDATE dash_contentad ca
SET document_id_big = ca.document_id
WHERE ca.document_id IS NOT NULL AND ca.id BETWEEN %s AND %s;
"""

DOCUMENT_ID_BIGINT_RENAME_OLD_SQL = """
ALTER TABLE dash_contentad
RENAME COLUMN document_id TO document_id_old;
"""

DOCUMENT_ID_BIGINT_RENAME_NEW_SQL = """
ALTER TABLE dash_contentad
RENAME COLUMN document_id_big TO document_id;
"""

BATCH_SIZE = 100000


def document_id_to_bigint(apps, schema_editor):
    with connection.cursor() as c:
        c.execute("BEGIN")
        c.execute(DOCUMENT_ID_BIGINT_CREATE_SQL)
        c.execute("COMMIT")
        c.execute("SELECT MAX(id) FROM dash_contentad")
        count = c.fetchone()[0] or 0
        for i in range(0, count, BATCH_SIZE):
            c.execute("BEGIN")
            print("Updating document_ids of contentads with ids between %s and %s" % (i, i + BATCH_SIZE))
            c.execute(DOCUMENT_ID_BIGINT_UPDATE_SQL, [i, i + BATCH_SIZE])
            c.execute("COMMIT")


def rename_document_id_columns(apps, schema_editor):
    with connection.cursor() as c:
        print("Renaming the document_id columns...")
        c.execute("BEGIN")
        c.execute(DOCUMENT_ID_BIGINT_RENAME_OLD_SQL)
        c.execute(DOCUMENT_ID_BIGINT_RENAME_NEW_SQL)
        c.execute("COMMIT")


class Migration(migrations.Migration):
    atomic = False

    dependencies = [("dash", "0376_auto_20190123_1443")]

    operations = [
        migrations.RunPython(document_id_to_bigint, atomic=True),
        migrations.RunPython(rename_document_id_columns, atomic=True),
    ]
