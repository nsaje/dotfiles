# Generated by Django 2.1.8 on 2019-05-20 09:56

import decimal

from django.db import migrations
from django.db import models

from core.models.settings.ad_group_settings.model import AdGroupSettings
from dash import constants
from utils import zlogging
from utils.queryset_helper import chunk_iterator

BATCH_SIZE = 10000
logger = zlogging.getLogger(__name__)


def foward_migration(apps, schema_editor):
    fill_unassigned_cpc_cpm_max_values(apps, schema_editor)


def backward_migration(apps, schema_editor):
    do_nothing(apps, schema_editor)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [("dash", "0422_add_bid_modifier_type_index")]

    operations = [migrations.RunPython(foward_migration, reverse_code=backward_migration)]


def fill_unassigned_cpc_cpm_max_values(apps, schema_editor):
    AdGroup = apps.get_model("dash", "AdGroup")
    AdGroupSettings = apps.get_model("dash", "AdGroupSettings")
    CampaignGoalValue = apps.get_model("dash", "CampaignGoalValue")
    CurrencyExchangeRate = apps.get_model("dash", "CurrencyExchangeRate")

    logger.info("Getting AdGroups.")

    ad_group_ids = list(
        AdGroup.objects.filter(models.Q(settings__cpc_cc=None) | models.Q(settings__max_cpm=None)).values_list(
            "id", flat=True
        )
    )

    logger.info("Getting Metadata.")

    # get AdGroup meta data like currency and whether it is targeting mobile
    meta_qs = (
        AdGroup.objects.filter(id__in=ad_group_ids)
        .annotate(
            ad_group_mobile_idx=models.functions.StrIndex("settings__target_devices", models.Value("mobile")),
            campaign_mobile_idx=models.functions.StrIndex("campaign__settings__target_devices", models.Value("mobile")),
        )
        .values("id", "campaign__id", "campaign__account__currency", "ad_group_mobile_idx", "campaign_mobile_idx")
    )
    meta_map = {e["id"]: e for e in meta_qs}

    goal_map = {}
    for cgv in (
        CampaignGoalValue.objects.filter(
            campaign_goal__campaign__id__in=set(v["campaign__id"] for v in meta_map.values()),
            campaign_goal__type=constants.CampaignGoalKPI.CPC,
        )
        .values("value", "campaign_goal__campaign__id")
        .distinct("campaign_goal__campaign__id")
        .order_by("campaign_goal__campaign__id", "-created_dt")
    ):
        goal_map[cgv["campaign_goal__campaign__id"]] = cgv["value"]

    # get relevant currency exchange rates
    currency_qs = (
        CurrencyExchangeRate.objects.filter(currency__in=[e["campaign__account__currency"] for e in meta_map.values()])
        .values("currency", "exchange_rate")
        .distinct("currency")
        .order_by("currency", "-date")
    )

    currency_exchange_map = {e["currency"]: e["exchange_rate"] for e in currency_qs}

    max_values_qs = AdGroup.objects.filter(id__in=ad_group_ids).values(
        "id",
        "settings__id",
        "settings__autopilot_state",
        "settings__cpc_cc",
        "settings__max_cpm",
        max_adgroupsource_settings__cpc_cc=models.Max("adgroupsource__settings__cpc_cc"),
        max_adgroupsource_settings__cpm=models.Max("adgroupsource__settings__cpm"),
        max_source_default_cpc_cc=models.Max("adgroupsource__source__default_cpc_cc"),
        max_source_default_cpm=models.Max("adgroupsource__source__default_cpm"),
        max_source_default_mobile_cpc_cc=models.Max("adgroupsource__source__default_mobile_cpc_cc"),
        max_source_default_mobile_cpm=models.Max("adgroupsource__source__default_mobile_cpm"),
    )

    ad_groups_using_defaults = set()

    chunk_number = 0
    for max_values_chunk in chunk_iterator(max_values_qs, chunk_size=BATCH_SIZE):
        chunk_number += 1
        logger.info("Processing chunk number %s", chunk_number)
        max_value_mapping, currency_map, defaults_ad_group_ids = _compute_mappings(
            meta_map,
            goal_map,
            currency_exchange_map,
            [e for e in max_values_chunk if e["settings__cpc_cc"] is None],
            constants.BiddingType.CPC,
        )
        ad_groups_using_defaults |= defaults_ad_group_ids
        _update_cpc_values(AdGroupSettings, max_value_mapping, currency_map)
        max_value_mapping, currency_map, defaults_ad_group_ids = _compute_mappings(
            meta_map,
            goal_map,
            currency_exchange_map,
            [e for e in max_values_chunk if e["settings__max_cpm"] is None],
            constants.BiddingType.CPM,
        )
        ad_groups_using_defaults |= defaults_ad_group_ids
        _update_cpm_values(AdGroupSettings, max_value_mapping, currency_map)

    if ad_groups_using_defaults:
        logger.warning("Default values have been assigned to AdGroup with IDs: %s", ad_groups_using_defaults)


def do_nothing(apps, schema_editor):
    # all changes can be undone by unapplying the previous migrations which removes the new columns
    pass


def _compute_mappings(meta_map, goal_map, currency_exchange_map, max_values_chunk, bidding_type):
    defaults_ad_group_ids = set()
    currency_map = {}
    max_value_mapping = {}

    # populate max_value and settings to ad group_mappings
    for record in max_values_chunk:
        ad_group_id = record.get("id")
        settings_id = record.get("settings__id")

        candidates = []

        if record["settings__autopilot_state"] in (
            constants.AdGroupSettingsAutopilotState.ACTIVE_CPC,
            constants.AdGroupSettingsAutopilotState.ACTIVE_CPC_BUDGET,
        ):
            if bidding_type == constants.BiddingType.CPC:
                candidates.append(decimal.Decimal("20.0000"))
            else:
                candidates.append(decimal.Decimal("25.0000"))

        if bidding_type == constants.BiddingType.CPC:
            candidates.extend([record["max_adgroupsource_settings__cpc_cc"], record["max_source_default_cpc_cc"]])
        else:
            candidates.extend([record["max_adgroupsource_settings__cpm"], record["max_source_default_cpm"]])

        ad_group_meta = meta_map[ad_group_id]
        if ad_group_meta["ad_group_mobile_idx"] != 0 or ad_group_meta["campaign_mobile_idx"] != 0:
            # it is not targeting mobile, remove max value for mobile
            if bidding_type == constants.BiddingType.CPC:
                candidates.append(record["max_source_default_mobile_cpc_cc"])
            else:
                candidates.append(record["max_source_default_mobile_cpm"])

        if goal_map:
            goal_value = goal_map.get(meta_map[ad_group_id]["campaign__id"])
            if goal_value:
                candidates.append(goal_value)

        candidates = sorted([e for e in candidates if e is not None], reverse=True)
        if not candidates:
            max_value_mapping[settings_id] = (
                AdGroupSettings.DEFAULT_CPC_VALUE
                if bidding_type == constants.BiddingType.CPC
                else AdGroupSettings.DEFAULT_CPM_VALUE
            )
            defaults_ad_group_ids.add(ad_group_id)
        else:
            max_value_mapping[settings_id] = candidates[0]

        currency_map[settings_id] = currency_exchange_map[meta_map[ad_group_id]["campaign__account__currency"]]

    return max_value_mapping, currency_map, defaults_ad_group_ids


def _update_cpc_values(AdGroupSettings, max_value_mapping, currency_map):
    settings_ids = set(max_value_mapping.keys())
    AdGroupSettings.objects.filter(id__in=settings_ids).update(
        cpc=models.Case(
            *[
                models.When(pk=pk, then=max_value_mapping[pk])
                for pk in settings_ids
                if max_value_mapping[pk] is not None
            ]
        ),
        local_cpc=models.Case(
            *[
                models.When(pk=pk, then=_to_local_currency(max_value_mapping[pk], currency_map[pk]))
                for pk in settings_ids
                if max_value_mapping[pk] is not None
            ]
        ),
    )


def _update_cpm_values(AdGroupSettings, max_value_mapping, currency_map):
    settings_ids = set(max_value_mapping.keys())
    AdGroupSettings.objects.filter(id__in=settings_ids).update(
        cpm=models.Case(
            *[
                models.When(pk=pk, then=max_value_mapping[pk])
                for pk in settings_ids
                if max_value_mapping[pk] is not None
            ]
        ),
        local_cpm=models.Case(
            *[
                models.When(pk=pk, then=_to_local_currency(max_value_mapping[pk], currency_map[pk]))
                for pk in settings_ids
                if max_value_mapping[pk] is not None
            ]
        ),
    )


def _to_local_currency(value, exchange_rate):
    return value.quantize(decimal.Decimal("10") ** value.as_tuple().exponent) * exchange_rate
