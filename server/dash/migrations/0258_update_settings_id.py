# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-11-23 16:14
from __future__ import unicode_literals

from django.db import migrations, transaction


def update_settings_id(apps, schema_editor):
    models = [{
        'entity_model': 'Account',
        'settings_model': 'AccountSettings',
        'entity_id': 'account_id',
    }, {
        'entity_model': 'Campaign',
        'settings_model': 'CampaignSettings',
        'entity_id': 'campaign_id',
    }, {
        'entity_model': 'AdGroup',
        'settings_model': 'AdGroupSettings',
        'entity_id': 'ad_group_id',
    }, {
        'entity_model': 'AdGroupSource',
        'settings_model': 'AdGroupSourceSettings',
        'entity_id': 'ad_group_source_id',
    }]

    for model in models:
        SettingsModel = apps.get_model('dash', model['settings_model'])
        EntityModel = apps.get_model('dash', model['entity_model'])

        entities = EntityModel.objects.all().filter(new_settings_id__isnull=True)
        total_entities = entities.count()
        for i, entity_id in enumerate(entities.values_list('id', flat=True), 1):
            if i % 1000 == 0:
                print('%s: %d/%d' % (model['settings_model'], i, total_entities))
            with transaction.atomic():
                entity_filter = {
                    model['entity_id']: entity_id,
                }
                settings = SettingsModel.objects.filter(**entity_filter).order_by('created_dt').last()
                if settings is None:
                    entity = EntityModel.objects.get(pk=entity_id)
                    if hasattr(entity, 'modified_by'):
                        created_by = entity.modified_by
                        created_dt = entity.modified_dt
                    else:
                        created_by = entity.ad_group.modified_by
                        created_dt = entity.ad_group.modified_dt
                    settings = SettingsModel(
                        created_by=created_by,
                        created_dt=created_dt,
                        **entity_filter)
                    settings.save()
                EntityModel.objects.all().filter(pk=entity_id).update(new_settings_id=settings.id)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('dash', '0257_add_settings_id_to_adgroupsource'),
    ]

    operations = [
        migrations.RunPython(update_settings_id),
    ]
