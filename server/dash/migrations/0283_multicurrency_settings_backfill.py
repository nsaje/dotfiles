# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-03-16 13:03
from __future__ import unicode_literals

from django.db import migrations
from django.db import connection


AD_GROUP_SETTINGS_BACKFILL_SQL = """
UPDATE dash_adgroupsettings ags
SET    local_cpc_cc = cpc_cc * cer.exchange_rate,
       local_autopilot_daily_budget = autopilot_daily_budget * cer.exchange_rate,
       local_b1_sources_group_cpc_cc = b1_sources_group_cpc_cc * cer.exchange_rate,
       local_b1_sources_group_daily_budget = b1_sources_group_daily_budget * cer.exchange_rate,
       local_max_cpm = max_cpm * cer.exchange_rate
FROM   dash_adgroup ag
       JOIN dash_campaign cmp
         ON ag.campaign_id = cmp.id
       JOIN dash_account acc
         ON cmp.account_id = acc.id
       JOIN (SELECT DISTINCT currency,
                             First_value(exchange_rate)
                               OVER (
                                 partition BY currency
                                 ORDER BY date DESC) AS exchange_rate
             FROM   dash_currencyexchangerate) cer
         ON acc.currency = cer.currency
WHERE  ags.id = ag.settings_id AND ags.id BETWEEN %s AND %s;
"""

AD_GROUP_SOURCE_SETTINGS_BACKFILL_SQL = """
UPDATE dash_adgroupsourcesettings agss
SET    local_cpc_cc = cpc_cc * cer.exchange_rate,
       local_daily_budget_cc = daily_budget_cc * cer.exchange_rate
FROM   dash_adgroupsource ags
       JOIN dash_adgroup ag
         ON ags.ad_group_id = ag.id
       JOIN dash_campaign cmp
         ON ag.campaign_id = cmp.id
       JOIN dash_account acc
         ON cmp.account_id = acc.id
       JOIN (SELECT DISTINCT currency,
                             First_value(exchange_rate)
                               OVER (
                                 partition BY currency
                                 ORDER BY date DESC) AS exchange_rate
             FROM   dash_currencyexchangerate) cer
         ON acc.currency = cer.currency
WHERE  agss.id = ags.settings_id AND agss.id BETWEEN %s AND %s;
"""

BATCH_SIZE = 100000


def ad_group_settings_backfill(apps, schema_editor):
    with connection.cursor() as c:
        c.execute("SELECT MAX(id) FROM dash_adgroupsettings")
        count = c.fetchone()[0] or 0
        for i in range(0, count, BATCH_SIZE):
            c.execute("BEGIN")
            print("Updating ids between %s and %s" % (i, i + BATCH_SIZE))
            c.execute(AD_GROUP_SETTINGS_BACKFILL_SQL, [i, i + BATCH_SIZE])
            c.execute("COMMIT")


def ad_group_source_settings_backfill(apps, schema_editor):
    with connection.cursor() as c:
        c.execute("SELECT MAX(id) FROM dash_adgroupsourcesettings")
        count = c.fetchone()[0] or 0
        for i in range(0, count, BATCH_SIZE):
            c.execute("BEGIN")
            print("Updating ids between %s and %s" % (i, i + BATCH_SIZE))
            c.execute(AD_GROUP_SOURCE_SETTINGS_BACKFILL_SQL, [i, i + BATCH_SIZE])
            c.execute("COMMIT")


class Migration(migrations.Migration):

    dependencies = [
        ('dash', '0282_allrtbadgroupsource'),
    ]

    operations = [
        migrations.RunPython(ad_group_settings_backfill),
        migrations.RunPython(ad_group_source_settings_backfill),
    ]
