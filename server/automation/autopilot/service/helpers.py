import datetime
from collections import defaultdict

from django.db.models import Q

import dash
import dash.constants
import dash.models
from automation import campaignstop
from automation import models
from utils import zlogging

from .. import settings

logger = zlogging.getLogger(__name__)

# TODO: RTAP: BACKFILL: remove after all agencies migrated
MIGRATING_AGENCY_IDS = [
    844,
    843,
    842,
    841,
    840,
    839,
    838,
    837,
    836,
    834,
    832,
    831,
    830,
    829,
    828,
    827,
    826,
    825,
    824,
    823,
    822,
    821,
    820,
    819,
    818,
    817,
    816,
    815,
    814,
    813,
    812,
    811,
    810,
    809,
    808,
    807,
    806,
    805,
    804,
    803,
    802,
    801,
    800,
    799,
    798,
    797,
    796,
    795,
    794,
    793,
    792,
    791,
    790,
    789,
    788,
    787,
    786,
    785,
    784,
    783,
    782,
    781,
    780,
    778,
    777,
    776,
    775,
    774,
    773,
    772,
    771,
    770,
    768,
    767,
    766,
    765,
    764,
    763,
    762,
    761,
    760,
    759,
    758,
    756,
    755,
    754,
    753,
    752,
    751,
    749,
    748,
    747,
    746,
    744,
    743,
    742,
    741,
    740,
    739,
    738,
    737,
    736,
    735,
    734,
    733,
    732,
    731,
    730,
    729,
    728,
    727,
    726,
    725,
    724,
    723,
    722,
    721,
    720,
    719,
    718,
    717,
    716,
    715,
    713,
    712,
    710,
    709,
    708,
    707,
    706,
    704,
    703,
    702,
    701,
    700,
    699,
    698,
    697,
    696,
    695,
    694,
    693,
    692,
    691,
    690,
    689,
    688,
    687,
    686,
    685,
    684,
    683,
    682,
    681,
    680,
    679,
    678,
    677,
    676,
    675,
    674,
    673,
    672,
    671,
    669,
    668,
    667,
    666,
    665,
    664,
    662,
    661,
    659,
    658,
    657,
    656,
    654,
    653,
    652,
    651,
    650,
    649,
    648,
    647,
    646,
    645,
    644,
    643,
    642,
    641,
    640,
    639,
    638,
    637,
    636,
    634,
    633,
    632,
    631,
    630,
    628,
    627,
    626,
    625,
    624,
    623,
    622,
    621,
    620,
    618,
    617,
    616,
    615,
    614,
    613,
    612,
    610,
    609,
    608,
    607,
    606,
    605,
    604,
    603,
    602,
    601,
    600,
    599,
    598,
    597,
    596,
    595,
    594,
    593,
    592,
    591,
    590,
    589,
    587,
    586,
    583,
    582,
    580,
    579,
    578,
    577,
    576,
    575,
    574,
    573,
    572,
    571,
    570,
    569,
    568,
    567,
    566,
    565,
    564,
    563,
    562,
    560,
    559,
    557,
    556,
    555,
    554,
    553,
    552,
    551,
    550,
    549,
    548,
    547,
    546,
    545,
    544,
    543,
    542,
    541,
    540,
    539,
    538,
    537,
    536,
    533,
    532,
    531,
    530,
    529,
    528,
    527,
    526,
    525,
    524,
    523,
    522,
    520,
    519,
    504,
    502,
    501,
    500,
    499,
    498,
    497,
    496,
    495,
    494,
    493,
    492,
    491,
    490,
    489,
    488,
    487,
    486,
    485,
    484,
    483,
    482,
    481,
    480,
    479,
    478,
    477,
    476,
    475,
    474,
    473,
    472,
    471,
    470,
    469,
    468,
    467,
    466,
    465,
    464,
    463,
    462,
    461,
    460,
    459,
    458,
    457,
    456,
    455,
    454,
    453,
    452,
    451,
    450,
    449,
    447,
    446,
    445,
    444,
    443,
    442,
    440,
    439,
    438,
    437,
    436,
    435,
    434,
    433,
    432,
    431,
    430,
    428,
    427,
    426,
    425,
    423,
    422,
    421,
    420,
    419,
    418,
    417,
    416,
    415,
    414,
    413,
    411,
    410,
    409,
    408,
    407,
    406,
    405,
    404,
    403,
    402,
    401,
    400,
    399,
    398,
    397,
    396,
    395,
    394,
    393,
    392,
    391,
    389,
    388,
    387,
    386,
    385,
    384,
    383,
    382,
    381,
    380,
    374,
    373,
    372,
    371,
    370,
    369,
    368,
    367,
    364,
    363,
    362,
    360,
    359,
    358,
    357,
    356,
    355,
    354,
    353,
    352,
    351,
    350,
    349,
    348,
    347,
    346,
    345,
    344,
    343,
    342,
    341,
    340,
    339,
    338,
    337,
    336,
    335,
    334,
    333,
    332,
    331,
    330,
    329,
    328,
    327,
    326,
    325,
    324,
    323,
    322,
    321,
    320,
    319,
    318,
    317,
    316,
    314,
    313,
    312,
    311,
    310,
    309,
    308,
    307,
    306,
    304,
    303,
    302,
    301,
    300,
    299,
    298,
    297,
    296,
    295,
    294,
    293,
    292,
    291,
    290,
    289,
    288,
    287,
    285,
    284,
    283,
    282,
    281,
    280,
    278,
    277,
    276,
    275,
    274,
    273,
    272,
    271,
    270,
    269,
    268,
    267,
    266,
    265,
    264,
    263,
    262,
    261,
    260,
    259,
    258,
    257,
    256,
    255,
    254,
    253,
    252,
    251,
    250,
    249,
    248,
    247,
    246,
    244,
    242,
    241,
    240,
    239,
    238,
    237,
    236,
    235,
    234,
    233,
    232,
    231,
    229,
    228,
    227,
    226,
    225,
    224,
    223,
    222,
    220,
    219,
    218,
    217,
    215,
    214,
    213,
    212,
    211,
    210,
    209,
    208,
    207,
    206,
    205,
    204,
    203,
    202,
    201,
    200,
    199,
    198,
    197,
    196,
    195,
    194,
    193,
    192,
    191,
    190,
    189,
    188,
    187,
    186,
    185,
    183,
    182,
    181,
    180,
    179,
    178,
    177,
    176,
    175,
    174,
    173,
    172,
    171,
    170,
    169,
    168,
    167,
    166,
    165,
    164,
    162,
    161,
    160,
    159,
    156,
    155,
    154,
    153,
    152,
    151,
    150,
    148,
    147,
    146,
    145,
    144,
    143,
    137,
    136,
    134,
    133,
    132,
    131,
    130,
    129,
    128,
    127,
    126,
    125,
    124,
    123,
    122,
    121,
    120,
    119,
    117,
    116,
    115,
    114,
    113,
    112,
    111,
    110,
    108,
    107,
    106,
    105,
    104,
    103,
    102,
    100,
    99,
    98,
    97,
    96,
    95,
    94,
    93,
    87,
    86,
    85,
    84,
    83,
    82,
    80,
    79,
    78,
    77,
    76,
    75,
    74,
    73,
    72,
    71,
    70,
    69,
    68,
    67,
    66,
    64,
    63,
    62,
    61,
    60,
    59,
    58,
    57,
    56,
    55,
    54,
    53,
    52,
    51,
    50,
    49,
    48,
    47,
    46,
    45,
    44,
    43,
    42,
    41,
    40,
    39,
    38,
    36,
    35,
    34,
    33,
    32,
    31,
    30,
    29,
    28,
    27,
    26,
    25,
    24,
    23,
    22,
    21,
    20,
    19,
    18,
    17,
    16,
    15,
    14,
    13,
    11,
    10,
    9,
    8,
    7,
    6,
    5,
    4,
    3,
]


def get_active_ad_groups_on_autopilot():
    return dash.models.AdGroup.objects.filter(campaign__settings__autopilot=True).filter_running()


def get_processed_autopilot_campaign_ids(from_date_time):
    return set(
        models.AutopilotLog.objects.filter(created_dt__gte=from_date_time)
        .filter(is_autopilot_job_run=True, campaign__isnull=False)
        .values_list("campaign", flat=True)
        .distinct()
    )


def get_autopilot_entities(campaign=None, excluded_campaign_ids=None):
    ad_groups = (
        dash.models.AdGroup.objects.all()
        .filter(campaign__settings__autopilot=True)
        .filter(Q(campaign__account__agency__isnull=False) & Q(campaign__account__agency__uses_realtime_autopilot=True))
        .exclude_archived()
        .select_related("settings", "campaign__settings")
        .distinct()
    )
    if excluded_campaign_ids:
        ad_groups = ad_groups.exclude(campaign__id__in=excluded_campaign_ids)

    if campaign is not None:
        ad_groups = ad_groups.filter(campaign=campaign)
    else:
        ad_groups = ad_groups.filter_active()

    if MIGRATING_AGENCY_IDS:
        ad_groups = ad_groups.exclude(campaign__account__agency_id__in=MIGRATING_AGENCY_IDS)

    campaignstop_states = campaignstop.get_campaignstop_states(
        dash.models.Campaign.objects.filter(adgroup__in=ad_groups)
    )

    data = defaultdict(list)
    for ag in ad_groups:
        if _should_exclude_ad_group(ag, campaignstop_states, campaign):
            continue
        data[ag.campaign].append(ag)

    return data


def _should_exclude_ad_group(ag, campaignstop_states, campaign):
    # do not process on setting change and not campaign autopilot
    if campaign is not None and not ag.campaign.settings.autopilot:
        return True

    # do not process when adgroup not running
    if ag.get_running_status(ag.settings) != dash.constants.AdGroupRunningStatus.ACTIVE:
        return True

    # on setting change and campaign autopilot process everything but paused adgroups
    if campaign is not None:
        return False

    # do not process adgroups stopped by campaign stop on daily runs
    if ag.campaign.id not in campaignstop_states or not campaignstop_states[ag.campaign.id]["allowed_to_run"]:
        return True

    return False


def ad_group_source_is_synced(ad_group_source):
    min_sync_date = datetime.datetime.utcnow() - datetime.timedelta(hours=settings.SYNC_IS_RECENT_HOURS)
    last_sync = ad_group_source.last_successful_sync_dt
    if last_sync is None:
        return False
    return last_sync >= min_sync_date


def update_ad_group_daily_budget(ad_group, daily_budget):
    ad_group.settings.update(
        None,
        daily_budget=daily_budget,
        skip_validation=True,
        skip_notification=True,
        skip_field_change_validation_autopilot=True,
        system_user=dash.constants.SystemUserType.AUTOPILOT,
        write_source_history=False,
    )


def get_campaign_goal_column(campaign_goal):
    if campaign_goal:
        column_definition = settings.GOALS_COLUMNS[campaign_goal.type]
        return column_definition["col"]


def get_campaign_goal_column_importance(campaign_goal):
    if campaign_goal:
        return settings.GOALS_COLUMNS[campaign_goal.type]["importance"]
