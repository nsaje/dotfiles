#!/usr/bin/env python

import os

from secretcrypt import Secret

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = Secret('plain::=o2)mkphq!igv$*josav@qobg)sz^uw2lorv@)kjcr1yct%q8l').get()

# Database
# https://docs.djangoproject.com/en/1.7/ref/settings/#databases

STATS_DB_NAME = 'stats'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'circle_test',
        'USER': 'ubuntu',
        'PASSWORD': ''
    },
    STATS_DB_NAME: {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': 5439,
    },
}

BASE_URL = 'https://one.zemanta.com'

ACCOUNT_ACTIVATION_DAYS = 30

ALLOWED_HOSTS = ['*']

SECURE_SSL_REDIRECT = False
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_REDIRECT_EXEMPT = []
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Email settings
EMAIL_USE_TLS = True
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = Secret('').get()

SEND_AD_GROUP_SETTINGS_CHANGE_MAIL = True
SEND_NOTIFICATION_MAIL = False
SUPPLY_REPORTS_FROM_EMAIL = 'supplyreports@zemanta.com'
FROM_EMAIL = 'help-test@zemanta.com'

# Path to log file
LOG_FILE = '/home/ubuntu/zemanta-eins.server.log'

# Metrics reporting
STATSD_INFLUX_HOST = 'localhost'
STATSD_INFLUX_PORT = 8135

# Saucelabs
SAUCELABS_USERNAME = ''
SAUCELABS_ACCESS_KEY = Secret('').get()

# Auth
GOOGLE_OAUTH_ENABLED = False
GOOGLE_OAUTH_CLIENT_ID = ''
GOOGLE_OAUTH_CLIENT_SECRET = Secret('').get()

# Static files
BUILD_NUMBER = None
BRANCH = None

SERVER_STATIC_URL = '/static'
CLIENT_STATIC_URL = 'http://0.0.0.0:9999'

# K1 API
K1_API_SIGN_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()
K1_REALTIMESTATS_ADGROUP_URL = ''

# Source credentials encryption key
CREDENTIALS_ENCRYPTION_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()  # has to be 32 bytes

# Pagerduty settings
PAGER_DUTY_ENABLED = False
PAGER_DUTY_URL = ''
PAGER_DUTY_ADOPS_SERVICE_KEY = Secret('').get()
PAGER_DUTY_SYSOPS_SERVICE_KEY = Secret('').get()
PAGER_DUTY_ENGINEERS_SERVICE_KEY = Secret('').get()

# Sentry config
RAVEN_CONFIG = {
    'dsn': '',
}

# Amazon AWS keys
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = Secret('').get()

# S3 related settings
S3_BUCKET = ''
S3_BUCKET_STATS = ''
S3_BUCKET_DEMO = ''
S3_BUCKET_THUMBNAILER = ''
S3_BUCKET_CUSTOM_REPORTS = ''
S3_BUCKET_PUBLISHER_GROUPS = ''
S3_BUCKET_VIDEO = ''
USE_S3 = False

# fallback dir when S3 is not used
# # FILE_STORAGE_DIR = ''

# adgroup-level reports aggregations
QUERY_AGGREGATE_REPORTS = False

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    },
    'breakdowns_rs': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    },
    'audience_sample_size': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    },
    'dash_db_cache': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    },
    'bizwire_cache': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    },
    'local_memory_cache': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    },
}

USE_HASH_CACHE = False
HASH_CACHE_TTL = 24 * 60 * 60

IMAGE_THUMBNAIL_URL = ''

# QUEUES
BROKER_TRANSPORT = 'sqs'
BROKER_USER = AWS_ACCESS_KEY_ID
BROKER_PASSWORD = AWS_SECRET_ACCESS_KEY

BROKER_URL = BROKER_TRANSPORT + '://' + BROKER_USER + ':' + BROKER_PASSWORD + '@'

CELERY_TASK_SERIALIZER = 'pickle'
CELERY_ACCEPT_CONTENT = ['pickle']

CELERY_ROUTES = {
    'reports_execute': {'queue': 'reports'},
    'upload_lambda_execute': {'queue': 'upload-lambda'},
}

QUEUE_NAME_PREFIX = 'test'

SQS_REGION = 'us-east-1'
SQS_VISIBILITY_TIMEOUT = 10 * 60

BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': SQS_VISIBILITY_TIMEOUT,
    'region': SQS_REGION,
    'polling_interval': 10,
    'queue_name_prefix': QUEUE_NAME_PREFIX,
}

USE_CELERY_FOR_REPORTS = False
USE_CELERY_FOR_UPLOAD_LAMBDAS = False

R1_DEMO_MODE = False
R1_API_SIGN_KEY = Secret('').get()
R1_REDIRECTS_API_URL = 'https://r1.zemanta.com/api/redirects/'
R1_REDIRECTS_BATCH_API_URL = 'https://r1.zemanta.com/api/redirectsbatch/'
R1_REDIRECTS_ADGROUP_API_URL = 'https://r1.zemanta.com/api/adgroup/{adgroup}/'
R1_REDIRECTS_ADGROUP_REALTIMESTATS_API_URL = 'https://r1.zemanta.com/api/adgroup/{adgroup}/realtimestats'
R1_VALIDATE_API_URL = 'https://r1.zemanta.com/api/validate/'
R1_BLANK_REDIRECT_URL = 'http://r1.zemanta.com/b/{redirect_id}/z1/1/{content_ad_id}/'
R1_CUSTOM_AUDIENCE_API_URL = 'https://r1.zemanta.com/api/audience/{audience_id}/'
R1_PIXEL_TRAFFIC_URL = 'https://r1.zemanta.com/api/pixeltraffic/request/'
R1_PIXEL_TRAFFIC_RESULT_URL = 'https://r1.zemanta.com/api/pixeltraffic/result/{job_id}/'
R1_PIXEL_URL = 'https://r1.zemanta.com/api/pixel/{account_id}/{slug}/'

# Budget automation
DEPLETING_AVAILABLE_BUDGET_SCALAR = 1.5
DEPLETING_CAMPAIGN_BUDGET_EMAIL = 'help@zemanta.com'

BIDDER_API_SIGN_KEY = Secret('').get()
BIDDER_API_URL_BASE = 'https://b1api.zemanta.com'

# BCM
BUDGET_RESERVE_FACTOR = 0.05

QUERY_INSPECT_ENABLED = False

# k1
K1_DEMO_MODE = False
K1_CONSISTENCY_SYNC = False

K1_CONSISTENCY_PING_ACCOUNT_QUEUE = 'k1-consistency_ping_account'
K1_CONSISTENCY_PING_AD_GROUP_QUEUE = 'k1-consistency_ping_ad_group'
K1_CONSISTENCY_PING_CONTENT_AD_QUEUE = 'k1-consistency_ping_content_ad'
K1_CONSISTENCY_PING_BLACKLIST_QUEUE = 'k1-consistency_ping_blacklist'

# DeployKitty
DK_API_KEY = Secret('').get()
DK_DEMO_PREPARE_ENDPOINT = ''
DK_DEMO_UP_ENDPOINT = ''
DK_DEMO_DOWN_ENDPOINT = ''

# l1
LAMBDA_REGION = 'us-east-1'
LAMBDA_CONTENT_UPLOAD_SIGN_KEY = Secret('').get()
LAMBDA_CONTENT_UPLOAD_NAMESPACE = 't'
LAMBDA_CONTENT_UPLOAD_FUNCTION_NAME = 'z1-content-upload-test1'
LAMBDA_CONTENT_UPLOAD_CALLBACK_URL = 'https://z1-1452281140.us-east-1.elb.amazonaws.com/api/callbacks/content-upload/'

LAMBDA_VIDEO_UPLOAD_SIGN_KEY = Secret('').get()
LAMBDA_CALLBACK_HOST = ''
LAMBDA_ENVIRONMENT = 'test'
VIDEO_PREVIEW_URL = 'https://s3.amazonaws.com/zemvideos/transcoded/{filename}'

# Slack hooks
SLACK_INCOMING_HOOK_URL = ''

# GA credentials
GA_PRIVATE_KEY = Secret('').get()
GA_CLIENT_EMAIL = Secret('').get()

# bizwire
BIZWIRE_API_SIGN_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()
# path for S3 mock
FILE_STORAGE_DIR = '/tmp'

INFLUX_DATABASES = {
    'default': {
        'database': '',
        'username': '',
        'password': '',
        'host': '',
        'port': 8086,
        'ssl': True,
        'verify_ssl': True,
    },
}

BLUEKAI_API_PARTNER_ID = '2661'
BLUEKAI_API_USER_KEY = ''
BLUEKAI_API_SECRET_KEY = Secret('').get()

REST_FRAMEWORK = {
    'UNICODE_JSON': False,
    'EXCEPTION_HANDLER': 'restapi.exceptions.custom_exception_handler',
}
