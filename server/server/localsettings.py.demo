#!/usr/bin/env python

import os
from secretcrypt import Secret

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=o2)mkphq!igv$*josav@qobg)sz^uw2lorv@)kjcr1yct%q8l'

STATS_DB_NAME = 'k1'

# Database
# https://docs.djangoproject.com/en/1.7/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_ENV_POSTGRES_DB', 'one'),
        'USER': os.environ.get('DB_ENV_POSTGRES_USER', 'one'),
        'PASSWORD': os.environ.get('DB_ENV_POSTGRES_PASSWORD', 'eins'),
        'HOST': os.environ.get('DB_PORT_5432_TCP_ADDR', 'db'),
        'PORT': int(os.environ.get('DB_PORT_5432_TCP_PORT', 5432)),
    },
    STATS_DB_NAME: {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'k1',
        'USER': 'eins',
        'PASSWORD': Secret('kms:region=us-east-1:CiDdfiP9DHF52gr8mpTmZ/ZwRu2qZbRw8dV0ohsw+OhZexKYAQEBAgB43X4j/QxxedoK/JqU5mf2cEbtqmW0cPHVdKIbMPjoWXsAAABvMG0GCSqGSIb3DQEHBqBgMF4CAQAwWQYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAxNqKE9myZXmnLwhqUCARCALHbH8JP18GmTUhaxOmWSi2ClezAYVZ+r72uvYNuk3CFW6UOuiQUtXQrujDQU').get(),
        'HOST': 'zemantaone.cf6ca6mynjjb.us-east-1.redshift.amazonaws.com',
        'PORT': 5439
    }
}

ALLOWED_HOSTS = [ '{INSTANCE_NAME}.demo.zemanta.com'.format(INSTANCE_NAME=os.environ.get('INSTANCE_NAME', 'demo123')), ]

BASE_URL = 'https://{INSTANCE_NAME}.demo.zemanta.com'.format(INSTANCE_NAME=os.environ.get('INSTANCE_NAME', 'demo123'))

ACCOUNT_ACTIVATION_DAYS = 30

SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_REDIRECT_EXEMPT = []
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Email settings
EMAIL_USE_TLS = True
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = Secret('').get()

SEND_AD_GROUP_SETTINGS_CHANGE_MAIL = False
SEND_NOTIFICATION_MAIL = False
SUPPLY_REPORTS_FROM_EMAIL = 'supplyreports@zemanta.com'
FROM_EMAIL = 'help-test@zemanta.com'

# Path to log file
LOG_FILE = '/app/logs/eins-log.log'

# Stats
STATSD_INFLUX_HOST = os.environ.get('TELEGRAF_PORT_8135_UDP_ADDR', 'telegraf')
STATSD_INFLUX_PORT = int(os.environ.get('TELEGRAF_PORT_8135_UDP_PORT', '8135'))

# Saucelabs
SAUCELABS_USERNAME = ''
SAUCELABS_ACCESS_KEY = Secret('').get()

# Auth
GOOGLE_OAUTH_ENABLED = False
GOOGLE_OAUTH_CLIENT_ID = ''
GOOGLE_OAUTH_CLIENT_SECRET = Secret('').get()

# Static files
BUILD_NUMBER = None

if os.environ.get('BUILD'):
    BUILD_NUMBER = os.environ.get('BUILD')
elif os.path.isfile('build_number.txt'):
    with open('build_number.txt', 'r') as build_number:
        BUILD_NUMBER = build_number.read().strip()

_ROOT_STATIC_URL = 'https://one-static.zemanta.com/build-{}'.format(BUILD_NUMBER)
SERVER_STATIC_URL = _ROOT_STATIC_URL + '/server'
CLIENT_STATIC_URL = _ROOT_STATIC_URL + '/client'

BRANCH = None
if os.environ.get('BRANCH'):
    BRANCH = os.environ.get('BRANCH')

# K1 API
K1_API_SIGN_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()

# Source credentials encryption key
CREDENTIALS_ENCRYPTION_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()  # has to be 32 bytes

# Pagerduty settings
PAGER_DUTY_ENABLED = False
PAGER_DUTY_URL = ''
PAGER_DUTY_ADOPS_SERVICE_KEY = Secret('').get()
PAGER_DUTY_SYSOPS_SERVICE_KEY = Secret('').get()
PAGER_DUTY_ENGINEERS_SERVICE_KEY = Secret('').get()

# Sentry config
RAVEN_CONFIG = {
    'dsn': '',
}

# Amazon AWS keys
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = Secret('').get()

# S3 related settings
S3_BUCKET = ''
S3_BUCKET_STATS = ''
S3_BUCKET_DEMO = ''
S3_BUCKET_THUMBNAILER = ''
S3_BUCKET_CUSTOM_REPORTS = ''
S3_BUCKET_PUBLISHER_GROUPS = ''
USE_S3 = False

# adgroup-level reports aggregations
QUERY_AGGREGATE_REPORTS=False

# cache settings
_MEMCACHED_ADDR = os.environ.get('MEMCACHED_PORT_11211_TCP_ADDR', '127.0.0.1')
_MEMCACHED_PORT = os.environ.get('MEMCACHED_PORT_11211_TCP_PORT', '11211')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'demo-default-cache',
    },
    'breakdowns_rs': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    },
    'local_memory_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 60,  # 1 min
    },
}


USE_HASH_CACHE = False
HASH_CACHE_TTL = 24 * 60 * 60

IMAGE_THUMBNAIL_URL = 'https://images2.zemanta.com/'

# QUEUES
BROKER_TRANSPORT = 'sqs'
BROKER_USER = AWS_ACCESS_KEY_ID
BROKER_PASSWORD = AWS_SECRET_ACCESS_KEY

BROKER_URL = BROKER_TRANSPORT + '://' + BROKER_USER + ':' + BROKER_PASSWORD + '@'

CELERY_TASK_SERIALIZER = 'pickle'
CELERY_ACCEPT_CONTENT = ['pickle']

CELERY_ROUTES = {
    'reports_execute': {'queue': 'reports'},
}

SQS_REGION = ''
SQS_QUEUE_PREFIX = 'demo'
SQS_VISIBILITY_TIMEOUT = 10 * 60

BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': SQS_VISIBILITY_TIMEOUT,
    'region': SQS_REGION,
    'polling_interval': 10,
}

USE_CELERY_FOR_REPORTS = False

R1_DEMO_MODE = True
R1_API_SIGN_KEY = Secret('').get()
R1_REDIRECTS_API_URL = ''
R1_REDIRECTS_BATCH_API_URL = ''
R1_REDIRECTS_ADGROUP_API_URL = ''
R1_REDIRECTS_ADGROUP_REALTIMESTATS_API_URL = ''
R1_VALIDATE_API_URL = ''
R1_BLANK_REDIRECT_URL = 'http://r1.zemanta.com/r/{redirect_id}/z1/1/{content_ad_id}/'
R1_CONVERSION_STATS_URL = ''
R1_CONVERSION_STATS_RESULT_URL = ''
R1_CUSTOM_AUDIENCE_API_URL = ''
R1_PIXEL_TRAFFIC_URL = ''
R1_PIXEL_TRAFFIC_RESULT_URL = ''
R1_PIXEL_URL = ''

# Budget automation
DEPLETING_AVAILABLE_BUDGET_SCALAR = 1.5
DEPLETING_CAMPAIGN_BUDGET_EMAIL = 'help@zemanta.com'

BIDDER_API_SIGN_KEY = Secret('').get()
BIDDER_API_URL_BASE = 'https://b1api.zemanta.com'

# BCM
BUDGET_RESERVE_FACTOR = 0.05

QUERY_INSPECT_ENABLED = False

# k1
K1_DEMO_MODE = True
K1_CONSISTENCY_SYNC = True

K1_CONSISTENCY_PING_ACCOUNT_QUEUE = 'k1-consistency_ping_account'
K1_CONSISTENCY_PING_AD_GROUP_QUEUE = 'k1-consistency_ping_ad_group'
K1_CONSISTENCY_PING_CONTENT_AD_QUEUE = 'k1-consistency_ping_content_ad'
K1_CONSISTENCY_PING_BLACKLIST_QUEUE = 'k1-consistency_ping_blacklist'

# DeployKitty
DK_API_KEY = Secret('').get()
DK_DEMO_PREPARE_ENDPOINT = ''
DK_DEMO_UP_ENDPOINT = ''
DK_DEMO_DOWN_ENDPOINT = ''

LAMBDA_REGION = 'us-east-1'
LAMBDA_CONTENT_UPLOAD_SIGN_KEY = Secret('kms:region=us-east-1:CiDdfiP9DHF52gr8mpTmZ/ZwRu2qZbRw8dV0ohsw+OhZexK/AQEBAgB43X4j/QxxedoK/JqU5mf2cEbtqmW0cPHVdKIbMPjoWXsAAACWMIGTBgkqhkiG9w0BBwaggYUwgYICAQAwfQYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAx7yLKe0tUFVxMxsMMCARCAUFMra/DjBi1zN9BhzOI/C8+JHJA5rBM0tsNGeCZBzYnFgMm951IWfgRr7gqwdnPVqzDdwHwMHYzbR2viuXRMus4bfcdCm2BEqQBnNAgZ/fZt').get()
LAMBDA_CONTENT_UPLOAD_NAMESPACE = os.environ.get('INSTANCE_NAME', 'demo123')
LAMBDA_CONTENT_UPLOAD_FUNCTION_NAME = 'z1-content-upload'
LAMBDA_CONTENT_UPLOAD_CALLBACK_URL = 'https://{INSTANCE_NAME}.demo.zemanta.com/api/callbacks/content-upload/'.format(INSTANCE_NAME=LAMBDA_CONTENT_UPLOAD_NAMESPACE)

# Slack hooks
SLACK_INCOMING_HOOK_URL = Secret('').get()

# GA credentials
GA_PRIVATE_KEY = Secret('').get()
GA_CLIENT_EMAIL = Secret('').get()

# bizwire
BIZWIRE_API_SIGN_KEY = Secret('plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').get()
# path for S3 mock
FILE_STORAGE_DIR = '/tmp'
INFLUX_DATABASES = {
    'default': {
        'database': '',
        'username': '',
        'password': '',
        'host': '',
        'port': 8086,
        'ssl': True,
        'verify_ssl': True,
    },
}
