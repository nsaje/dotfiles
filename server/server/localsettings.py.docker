#!/usr/bin/env python

import collections
import os.path

from secretcrypt import Secret

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "=o2)mkphq!igv$*josav@qobg)sz^uw2lorv@)kjcr1yct%q8l"

APT_MODE = False

# Entities databases
DATABASE_READ_REPLICAS = []

# Stats databases
STATS_DB_POSTGRES_MAX_DAYS = 62
STATS_DB_POSTGRES = ["stats-postgres"]
STATS_DB_HOT_CLUSTER_MAX_DAYS = 186
STATS_DB_HOT_CLUSTER = "stats"
STATS_DB_COLD_CLUSTERS = [STATS_DB_HOT_CLUSTER]

_REDSHIFT_PASSWORD = ""
_PG01_PASSWORD = ""
try:
    _REDSHIFT_PASSWORD = (
        Secret(
            "kms:region=us-east-1:AQECAHi+LUun9zpdDynDViFKm08DnYVERdz5zNZO4BgKN2CjEAAAAG0wawYJKoZIhvcNAQcGoF4wXAIBADBXBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDDlDpTJN8Wk6owdToQIBEIAqTeV9zIxNgeNlrCP4EU1waJ6/VgR46uDjdSSW6OaQPqcKk3q95p3+nmFQ"  # noqa
        )
        .get()
        .decode("utf-8")
    )
except Exception:
    pass
try:
    _PG01_PASSWORD = (
        Secret(
            "kms:region=us-east-1:AQECAHi+LUun9zpdDynDViFKm08DnYVERdz5zNZO4BgKN2CjEAAAAHQwcgYJKoZIhvcNAQcGoGUwYwIBADBeBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDN+Qf0GjhUNyUYAMBwIBEIAxik4CbQ5ceWlyBNzT103YK0vZvq/KjSJKVTDp3DTbBuLO4ykRtSlOmOqESX5q7JRtmA=="  # noqa
        )
        .get()
        .decode("utf-8")
    )
except Exception:
    pass

_DOCKER_POSTGRES = {
    "ENGINE": "django.db.backends.postgresql_psycopg2",
    "NAME": "one-dev",
    "USER": "eins",
    "PASSWORD": "devpwd",
    "HOST": "postgres",
    "PORT": 5432,
    "TEST": {"NAME": "onetestdb"},
}

DATABASES = {
    "default": _DOCKER_POSTGRES,
    STATS_DB_HOT_CLUSTER: {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "dev",
        "USER": "developer",
        "PASSWORD": _REDSHIFT_PASSWORD,
        "HOST": "development-cluster.cf6ca6mynjjb.us-east-1.redshift.amazonaws.com",
        "PORT": 5439,
    },
    "stats-postgres": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "one-dev",
        "USER": "eins",
        "PASSWORD": "devpwd",
        "HOST": "statsdb",
        "PORT": 5432,
    },
}

if os.environ.get("DB") == "pg01":
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "one",
        "USER": "zemadmin",
        "PASSWORD": _PG01_PASSWORD,
        "HOST": "pg01.cmkkg7ghktp5.us-east-1.rds.amazonaws.com",
        "PORT": 5432,
    }

ALLOWED_HOSTS = ["eins", "server", "localhost"]

BASE_URL = "https://one.zemanta.com"

ACCOUNT_ACTIVATION_DAYS = 30

SECURE_SSL_REDIRECT = False
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_REDIRECT_EXEMPT = []
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# added by request from asraka@outbrain.com (https://trello.com/c/BH1S1NNA/8-continuous-dast)
# NOTE: these are defaults - change them!
SECURE_BROWSER_XSS_FILTER = False
SECURE_CONTENT_TYPE_NOSNIFF = False
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_SECONDS = 0
SESSION_COOKIE_SECURE = False

# Email settings
EMAIL_USE_TLS = True
EMAIL_HOST = ""
EMAIL_PORT = 587
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = Secret("").get().decode("utf-8")

SEND_AD_GROUP_SETTINGS_CHANGE_MAIL = True
SEND_NOTIFICATION_MAIL = False
SUPPLY_REPORTS_FROM_EMAIL = "supplyreports@zemanta.com"
FROM_EMAIL = "help-test@zemanta.com"

# Path to log file
LOG_FILE = "/app/logs/eins-log.log"

# Stats
STATSD_INFLUX_HOST = os.environ.get("TELEGRAF_PORT_8135_UDP_ADDR", "localhost")
STATSD_INFLUX_PORT = int(os.environ.get("TELEGRAF_PORT_8135_UDP_PORT", "8135"))

# Intercom
INTERCOM_ID_VERIFICATION_SECRET = Secret("").get()

# Saucelabs
SAUCELABS_USERNAME = ""
SAUCELABS_ACCESS_KEY = Secret("").get().decode("utf-8")

# Auth
GOOGLE_OAUTH_ENABLED = False
GOOGLE_OAUTH_CLIENT_ID = ""
GOOGLE_OAUTH_CLIENT_SECRET = Secret("").get().decode("utf-8")

# Static files
BRANCH = None
if os.environ.get("BRANCH"):
    BRANCH = os.environ.get("BRANCH")

BUILD_NUMBER = None
if os.environ.get("BUILD"):
    BUILD_NUMBER = os.environ.get("BUILD")
elif os.path.isfile("build_number.txt"):
    with open("build_number.txt", "r") as build_number:
        BUILD_NUMBER = build_number.read().strip()

SERVER_STATIC_URL = "/static"
CLIENT_STATIC_URL = "http://localhost:9999"

# K1 API
K1_API_SIGN_KEY = [Secret("plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").get()]
K1_REALTIMESTATS_ADGROUP_URL = ""
K1_REALTIMESTATS_ADGROUP_SPEND_URL = ""
K1_YAHOO_MIGRATION_URL = ""
K1_YAHOO_MIGRATION_CAMPAIGN_MAPPINGS_URL = ""
K1_YAHOO_MIGRATION_CONTENT_AD_MAPPINGS_URL = ""

# Source credentials encryption key
CREDENTIALS_ENCRYPTION_KEY = Secret("plain::aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa").get()  # has to be 32 bytes

# Pagerduty settings
PAGER_DUTY_ENABLED = False
PAGER_DUTY_REST_API_URL = ""
PAGER_DUTY_REST_API_KEY = Secret("").get().decode("utf-8")
PAGER_DUTY_Z1_TEAM_ID = ""
PAGER_DUTY_Z1_TEAM_SCHEDULE_ID = ""
PAGER_DUTY_URL = ""
PAGER_DUTY_ADOPS_SERVICE_KEY = Secret("").get().decode("utf-8")
PAGER_DUTY_SYSOPS_SERVICE_KEY = Secret("").get().decode("utf-8")
PAGER_DUTY_ENGINEERS_SERVICE_KEY = Secret("").get().decode("utf-8")
PAGER_DUTY_Z1_SERVICE_KEY = Secret("").get().decode("utf-8")
PAGER_DUTY_PRODOPS_SERVICE_KEY = Secret("").get().decode("utf-8")

# Sentry config
SENTRY_CONFIG = {"dsn": ""}

HARDCODED_ACCOUNT_ID_OEN = -1
HARDCODED_ACCOUNT_ID_BUSINESSWIRE = -2
HARDCODED_ACCOUNT_ID_INPOWERED_1 = -3
HARDCODED_ACCOUNT_ID_INPOWERED_2 = -4
HARDCODED_ACCOUNT_ID_INPOWERED_3 = -5

# S3 related settings
S3_BUCKET_STATS = "nsaje-test"
S3_BUCKET_DEMO = ""
S3_BUCKET_ARTIFACTS = ""
S3_BUCKET_THUMBNAILER = ""
S3_BUCKET_PUBLISHER_GROUPS = ""
S3_BUCKET_VIDEO = ""
S3_BUCKET_B1_DATA_USE = ""

USE_S3 = False

# adgroup-level reports aggregations
QUERY_AGGREGATE_REPORTS = False

CACHES = {
    "default": {"BACKEND": "django.core.cache.backends.memcached.PyLibMCCache", "LOCATION": ["memcached:11211"]},
    "breakdowns_rs": {"BACKEND": "django.core.cache.backends.memcached.PyLibMCCache", "LOCATION": ["memcached:11211"]},
    "redshift_background": {
        "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
        "LOCATION": ["memcached:11211"],
    },
    "dash_db_cache": {"BACKEND": "django.core.cache.backends.memcached.PyLibMCCache", "LOCATION": ["memcached:11211"]},
    "audience_sample_size": {
        "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
        "LOCATION": ["memcached:11211"],
    },
    "inventory_planning": {
        "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
        "LOCATION": ["memcached:11211"],
    },
    "local_memory_cache": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
        "TIMEOUT": 60,  # 1 min
    },
    "entity_permission_cache": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "entity_permission_cache",
        "TIMEOUT": None,  # don't expire, cache invalidated when data manually updated,
    },
    "cluster_level_cache": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "cluster_level_cache",
    },
}


USE_HASH_CACHE = False
HASH_CACHE_TTL = 24 * 60 * 60

USE_REDSHIFT_BACKGROUND_CACHE = False

IMAGE_THUMBNAIL_URL = "https://zem.outbrainimg.com/"

# QUEUES
BROKER_TRANSPORT = "memory"
BROKER_URL = BROKER_TRANSPORT + "://"

CELERY_RESULT_BACKEND = "django-db"

CELERY_TASK_SERIALIZER = "pickle"
CELERY_ACCEPT_CONTENT = ["pickle"]

CELERY_ROUTES = {
    "reports_execute": {"queue": "reports"},
    "upload_lambda_execute": {"queue": "upload-lambda"},
    "redshift_background_cache": {"queue": "redshift-background-cache"},
    "campaign_cloning": {"queue": "campaign-cloning"},
    "ad_group_cloning": {"queue": "z1-ad-group-cloning"},
}

QUEUE_NAME_PREFIX = "test"

SQS_REGION = "us-east-1"
SQS_VISIBILITY_TIMEOUT = 10 * 60

BROKER_TRANSPORT_OPTIONS = {
    "visibility_timeout": SQS_VISIBILITY_TIMEOUT,
    "region": SQS_REGION,
    "polling_interval": 10,
    "queue_name_prefix": QUEUE_NAME_PREFIX,
}

USE_CELERY_FOR_REPORTS = False
USE_CELERY_FOR_UPLOAD_LAMBDAS = False
USE_CELERY_FOR_CAMPAIGN_CLONING = False
USE_CELERY_FOR_AD_GROUP_CLONING = False

R1_DEMO_MODE = True
R1_API_SIGN_KEY = Secret("").get()
R1_REDIRECTS_API_URL = "https://r1.zemanta.com/api/redirects/"
R1_REDIRECTS_BATCH_API_URL = "https://r1.zemanta.com/api/redirectsbatch/"
R1_REDIRECTS_ADGROUP_API_URL = "https://r1.zemanta.com/api/adgroup/{adgroup}/"
R1_VALIDATE_API_URL = "https://r1.zemanta.com/api/validate/"
R1_BLANK_REDIRECT_URL = "http://r1.zemanta.com/b/{redirect_id}/z1/1/{content_ad_id}/"
R1_CUSTOM_AUDIENCE_API_URL = "https://r1.zemanta.com/api/audience/{audience_id}/"
R1_PIXEL_TRAFFIC_URL = "https://r1.zemanta.com/api/pixeltraffic/request/"
R1_PIXEL_TRAFFIC_RESULT_URL = "https://r1.zemanta.com/api/pixeltraffic/result/{job_id}/"
R1_PIXEL_URL = "https://r1.zemanta.com/api/pixel/{account_id}/{slug}/"

# Budget automation
DEPLETING_AVAILABLE_BUDGET_SCALAR = 1.5
DEPLETING_CAMPAIGN_BUDGET_EMAIL = "help@zemanta.com"

BIDDER_API_SIGN_KEY = [Secret("").get()]
BIDDER_API_URL_BASE = "https://b1api.zemanta.com"

# BCM
BUDGET_RESERVE_FACTOR = 0.05

QUERY_INSPECT_ENABLED = True
ENABLE_DEBUG_TOOLBAR = False
ENABLE_DJANGO_EXTENSIONS = True

# campaignstop

CAMPAIGN_STOP_UPDATE_HANDLER_QUEUE = "campaignstop-updates"
DISABLE_CAMPAIGNSTOP_SIGNALS = True

# k1
K1_DEMO_MODE = False
K1_CONSISTENCY_SYNC = False

K1_CONSISTENCY_PING_ACCOUNT_QUEUE = "k1-consistency_ping_account"
K1_CONSISTENCY_PING_AD_GROUP_QUEUE = "k1-consistency_ping_ad_group"
K1_CONSISTENCY_PING_CONTENT_AD_QUEUE = "k1-consistency_ping_content_ad"
K1_CONSISTENCY_PING_BLACKLIST_QUEUE = "k1-consistency_ping_blacklist"

DEMO_NODE_HOSTNAME = ""
DEMO_NODE_SSH_KEY = ""
DEMO_USERNAME = "regular.user+demo@zemanta.com"
DEMO_PASSWORD = ""
DEMO_URL = "https://{instance_name}.demo.zemanta.com"

# l1
LAMBDA_REGION = "us-east-1"
LAMBDA_CONTENT_UPLOAD_SIGN_KEY = Secret("").get()
LAMBDA_CONTENT_UPLOAD_NAMESPACE = "t"
LAMBDA_CONTENT_UPLOAD_FUNCTION_NAME = "mock"
LAMBDA_CONTENT_UPLOAD_CALLBACK_URL = ""

LAMBDA_VIDEO_UPLOAD_SIGN_KEY = Secret("").get()
LAMBDA_ENVIRONMENT = "test"
LAMBDA_CALLBACK_HOST = ""
VIDEO_PREVIEW_URL = "https://s3.amazonaws.com/zemvideos/transcoded/{filename}"
VAST_URL = "https://s3.amazonaws.com/zemvideos/vast/{filename}"

# Slack hooks
SLACK_INCOMING_HOOK_URL = Secret("").get().decode("utf-8")

# GA credentials - order newest to oldest
GA_CREDENTIALS = collections.OrderedDict()
GA_CREDENTIALS["account-2@example.com"] = Secret("").get().decode("utf-8")
GA_CREDENTIALS["account-1@example.com"] = Secret("").get().decode("utf-8")

S3_MOCK_DIR = "/tmp"

BLUEKAI_API_PARTNER_ID = "2661"
BLUEKAI_API_USER_KEY = ""
BLUEKAI_API_SECRET_KEY = Secret("").get().decode("utf-8")

REST_FRAMEWORK = {
    "UNICODE_JSON": False,
    "EXCEPTION_HANDLER": "restapi.common.exceptions.custom_exception_handler",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_THROTTLE_RATES": {"user": "100/second", "reportjob-create": "100/second"},  # per compute node
}

DISABLE_FACEBOOK = False
AMPLIFY_REVIEW = False

SPARK_MASTER = ""

FTP_REPORTS = {}

AMELIA_INTEGRATION_ENABLED = False
AMELIA_BASE_URL = ""
OUTBRAIN_INTERNAL_USERNAME = "test"
OUTBRAIN_INTERNAL_PASSWORD = Secret("plain::").get().decode("utf-8")

SSPD_ACCOUNT_REDIRECT_URL = "http://localhost:8081/ad-review?accountId={id}"
SSPD_CAMPAIGN_REDIRECT_URL = "http://localhost:8081/ad-review?campaignId={id}"
SSPD_AD_GROUP_REDIRECT_URL = "http://localhost:8081/ad-review?adGroupId={id}"
SSPD_CONTENT_AD_REDIRECT_URL = "http://localhost:8081/ad-review?contentAdId={id}"

SSPD_BASE_URL = "http://sspd-server:8080"
SSPD_AUTH_SECRET = "qwerty"

BIGQUERY_CREDENTIALS = {
    "type": "service_account",
    "project_id": "",
    "private_key_id": "",
    "private_key": "",
    "client_email": "",
    "client_id": "",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "",
}

RECAPTCHA_URL = ""
RECAPTCHA_SECRET_KEY = ""

METRICS_PUSH_GATEWAY = ""

try:
    from server.localsettings_docker_override import *  # noqa
except ImportError:
    pass

LOGGING_FORMATTER = "readable"
